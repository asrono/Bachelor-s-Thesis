%% SMS
close all; clear all;

plotRays    = true;
plotNormals = true;
%% Input parameters
% Etendue
U = 1; % [m^2]
% U < 2*[E_1,E_2] ( = 8 [m])

% Refraction of index lens
n = 1.6;

% angles for starting parabola
phi_E_start = 180;      % [degrees]
phi_E_end   = 360;      % [degrees]
phi_R_start = 0;        % [degrees]
phi_R_end   = 180;      % [degrees]
phi_1       = 285.8;    % [degrees]
phi_2       = 67;       % [degrees]
n_phi       = 1e5;      % #points to plot

% Define emitter (E) and receiver (R) plane
E_1 = [0;-2];       % [m]
E_2 = [0; 2];       % [m]

l_OA = 20;          % [m]
R_1  = [l_OA; -1];  % [m]
R_2  = [l_OA;  1];  % [m]

%% Input handling
% Degrees to radians
phi_E_start = phi_E_start * pi/180;
phi_E_end   = phi_E_end   * pi/180;
phi_R_start = phi_R_start * pi/180;
phi_R_end   = phi_R_end   * pi/180;

phi_1   = phi_1   * pi/180;
phi_2   = phi_2   * pi/180;

phi_E = linspace(phi_E_start, phi_E_end, n_phi);
phi_R = linspace(phi_R_start, phi_R_end, n_phi);

% Emitter and receiver plane
ER = ones(1,2,4);
ER(:,:,1) = E_1;
ER(:,:,2) = E_2;
ER(:,:,3) = R_1;
ER(:,:,4) = R_2;
%% SMS Method
%% Step 1
h_E = hyp(U,E_1,E_2,phi_E);
h_R = hyp(U,R_1,R_2,phi_R);
N   = hyp(U,E_1,E_2,phi_1);
X   = hyp(U,R_1,R_2,phi_2);

%% Step 2
n_N = find_normal(E_1,N,X,n);
n_X = find_normal(R_1,X,N,n);
%% Step 3

% Find X_1 and N_1
X_1 = SMSs3(E_2,N,X,R_1,n,n_N);
N_1 = SMSs3(R_2,X,N,E_1,n,n_X);

%% Step 4 (manually)
[X_2, N_2] = SMSs4_layer(ER,N_1,X_1,n);
[X_3, N_3] = SMSs4_layer(ER,N_2,X_2,n);
[X_4, N_4] = SMSs4_layer(ER,N_3,X_3,n);

%% Plotting
figure(1); % Step 1 and 2
% Plot transmitter and receiver planes
plot(E_1(1),E_1(2),'ro'); hold on
plot(E_2(1),E_2(2),'ro');
plot(R_1(1),R_1(2),'go');
plot(R_2(1),R_2(2),'go');

% Plot hyperbolas
plot(h_E(1,:), h_E(2,:),'.k');
plot(h_R(1,:), h_R(2,:),'.b');

% Plot N and X
c = 'ob';
plot_point(N,c)
plot_point(X,c)

plot_point(N_1,c)
plot_point(X_1,c)
plot_point(N_2,c)
plot_point(X_2,c)
plot_point(N_3,c)
plot_point(X_3,c)
plot_point(N_4,c)
plot_point(X_4,c)
plot_point(N_5,c)
plot_point(X_5,c)
plot_point(N_6,c)
plot_point(X_6,c)
plot_point(N_7,c)
plot_point(X_7,c)
plot_point(N_8,c)
plot_point(X_8,c)

% Plot starting normals
if plotNormals == true
q_n_N = quiver(N(1),N(2),n_N(1),n_N(2));
q_n_X = quiver(X(1),X(2),n_X(1),n_X(2));

q_n_N.Color = 'black';
q_n_X.Color = 'blue';
q_n_N.LineWidth = 2;
q_n_X.LineWidth = 2;
q_n_N.MaxHeadSize = 0.8;
q_n_X.MaxHeadSize = 0.8;
end

% Plot optical axis
plot([0 l_OA],[0 0],'k--')

% Plot rays
if plotRays == true
% Rays E_1
c = 'k';
plot_ray(E_1, N  , X  , R_1,c)
plot_ray(E_1, N_1, X  , R_2,c)

c = 'k';
plot_ray(E_2, N  , X_1, R_1,c)
end

% Set graph options
title('Step 1 and 2')
xlim([0 l_OA])
ylim([-2 6])
xlabel('Optical axis [m]')
ylabel('y [m]')
hold off
%% Functions
function plot_ray(E,G,F,R,c)
    plot([E(1) G(1) F(1) R(1)],[E(2) G(2) F(2) R(2)],c)
end

function plot_point(P,c)
    plot(P(1),P(2),c)
end
function h = hyp(U,P_1,P_2,phi)
    alpha = angh(P_2-P_1);
    h = P_1 + ( (U/2)^2  - norm(P_1-P_2)^2 ) ./ (U - 2 * norm(P_1-P_2) * cos(phi) ) .* [cos(phi+alpha); sin(phi+alpha)];
end

function a = ang(v,u)
    a = acos(dot(v,u)/(norm(v)*norm(u)));
end

function a = angp(v,u)
    if numel(v) ~= 2 || numel(u) ~= 2
        error('Angle can only be determined in 2D')
    end
    
    if u(1)*v(2)-u(2)*v(1) >= 0
        a = ang(v,u);
    else
        a = 2*pi - ang(v,u);
    end
end

function a = angh(v)
    a = angp(v,[1 0]);
end

function normal = find_normal(P,N,X,n)
    A = N - P;
    B = (X - N);
    C = A/norm(A)-n*B/norm(B);
    normal = C/norm(C);
end

function v_r = find_reflected_ray(v_i,n_i,n_r,normal)
    if dot(v_i,normal) < 0
        normal = -normal;
        c = -1;
    end
    n = n_i/n_r;
    v_r = n*v_i+(n*dot(normal,v_i)-sqrt(1-n^2*(1-dot(v_i,normal)))) * normal*c;
    v_r = v_r/norm(v_r);
end

function Q = find_new_point(G,F,P,v_r,n)
    S = n*norm(G-F)+norm(F-P);
    C_1 = n*S + dot(G-P,v_r);
    C_2 = S^2-norm(G-P)^2;
    Q   = G + v_r*(C_1 - sqrt(C_2*(1-n^2)+C_1^2))/(n^2-1);
end

function F_i = SMSs3(E,G,F,R,n,n_G)
    v_i = (G-E)/norm(G-E);
    v_r = find_reflected_ray(v_i,1,n,n_G);
	F_i = find_new_point(G,F,R,v_r,n);  
end

function X_inc = SMSs4(ER,N_i,X_i,n,right)
    if right == 1
        E_1 = ER(:,:,1)';
        E_2 = ER(:,:,2)';
        R_1 = ER(:,:,3)';
    else
        E_1 = ER(:,:,3)';
        E_2 = ER(:,:,4)';
        R_1 = ER(:,:,1)';
        [N_i, X_i] = deal(X_i,N_i);
    end
    
    n_N = find_normal(E_1,N_i,X_i,n);
    X_inc = SMSs3(E_2,N_i,X_i,R_1,n,n_N);
end

function [X_inc, N_inc] = SMSs4_layer(ER,N_i,X_i,n)
    X_inc = SMSs4(ER,N_i,X_i,n,1);
    N_inc = SMSs4(ER,N_i,X_i,n,0);
end